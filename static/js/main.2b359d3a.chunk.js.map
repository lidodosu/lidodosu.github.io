{"version":3,"sources":["components/InputParamField.js","components/CheckboxField.js","components/ParametrsForm.js","components/Chart.js","components/App.js","index.js"],"names":["InputParamField","_ref","label","id","value","onChange","react_default","a","createElement","type","CheckboxField","idCbx","checked","ParametrsForm","state","_this","props","onAmountPointChange","event","setState","amountPoint","target","onMinXChange","minX","onMaxXChange","maxX","onMinYChange","minY","onMaxYChange","maxY","onGridChange","updateGridAndLabel","checkedGrid","checkedLabelAxis","onLabelChange","_this2","this","_this$state","components_InputParamField","components_CheckboxField","onClick","updateData","React","Component","Chart","drawChart","reDraw","d3","attr","console","log","className","_this$props","getRandomArbitrary","min","max","parseInt","Math","random","remove","x","y","i","push","sort","b","data","xy_chart","width","height","xlabel","ylabel","chart","selection","each","datasets","margin","top","right","bottom","left","innerwidth","innerheight","x_scale","linear","range","domain","d","y_scale","color_scale","category10","length","x_axis","axis","scale","orient","y_axis","x_grid","tickSize","tickFormat","y_grid","draw_line","line","interpolate","svg","append","call","style","text","data_lines","selectAll","map","enter","_","datum","name","final","arguments","d3_xy_chart","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","amount","valMinX","valMaxX","valMinY","valMaxY","chkGrid","chkLabel","components_ParametrsForm","components_Chart","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.2b359d3a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputParamField = ({label, id, value, onChange}) => (\r\n  <div>\r\n    <p>{label}\r\n      <input\r\n        type=\"text\"\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default InputParamField;","import React from \"react\";\r\n\r\nconst CheckboxField = ({label, idCbx, checked, onChange}) => (\r\n    <div>\r\n        {label} \r\n        <input \r\n            type=\"checkbox\" \r\n            id={idCbx} \r\n            checked={checked}\r\n            onChange={onChange}\r\n        /> \r\n    </div>\r\n);\r\n\r\nexport default CheckboxField;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport InputParamField from \"./InputParamField\"\r\nimport CheckboxField from \"./CheckboxField\"\r\n\r\n\r\nclass ParametrsForm extends React.Component {\r\n    state=this.props;\r\n\r\n    // constructor(props) {\r\n    //   super(props);\r\n    //   this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    // }\r\n\r\n    // handleFilterTextChange(e) {\r\n    //   this.props.onAAmountPointChange(e.target.value);\r\n    // }\r\n\r\n  onAmountPointChange = event => {\r\n    this.setState({\r\n      amountPoint: event.target.value\r\n    })\r\n  };\r\n\r\n  onMinXChange = event => {\r\n    this.setState({\r\n      minX: event.target.value\r\n    })\r\n  };\r\n\r\n  onMaxXChange = event => {\r\n    this.setState({\r\n      maxX: event.target.value\r\n    })\r\n  };\r\n\r\n  onMinYChange = event => {\r\n    this.setState({\r\n      minY: event.target.value\r\n    })\r\n  };\r\n\r\n  onMaxYChange = event => {\r\n    this.setState({\r\n      maxY: event.target.value\r\n    })\r\n  };\r\n\r\n  // читтерство ?\r\n  onGridChange = event => {\r\n    this.props.updateGridAndLabel(!this.state.checkedGrid,this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedGrid: !this.state.checkedGrid\r\n    });\r\n    // console.log(event.target.checked);\r\n  }\r\n\r\n  onLabelChange = event => {\r\n    this.props.updateGridAndLabel(this.state.checkedGrid,!this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedLabelAxis: !this.state.checkedLabelAxis\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { amountPoint, minX, maxX, minY, maxY, checkedGrid, checkedLabelAxis } = this.state;\r\n\r\n    return (\r\n      <div id=\"controlPanel\">\r\n        <InputParamField label=\"Количество точек \"\r\n                          id=\"countPoints\"\r\n                          value={amountPoint}\r\n                          // onChange={this.handleFilterTextChange}\r\n                          onChange={this.onAmountPointChange} \r\n        />\r\n        <p>\r\n          <InputParamField label=\"Диапазон начений по оси X: от \"\r\n                          id=\"minX\"\r\n                          value={minX}\r\n                          onChange={this.onMinXChange} />\r\n          <InputParamField label=\" до \"\r\n                          id=\"maxX\"\r\n                          value={maxX}\r\n                          onChange={this.onMaxXChange} />\r\n        </p>\r\n        <p>\r\n          <InputParamField label=\"Диапазон начений по оси Y: от \"\r\n                          id=\"minY\"\r\n                          value={minY}\r\n                          onChange={this.onMinYChange} />\r\n          <InputParamField label=\" до \"\r\n                          id=\"maxY\"\r\n                          value={maxY}\r\n                          onChange={this.onMaxYChange} />\r\n        </p>\r\n\r\n\r\n        {/* <p>Количество точек:<input type=\"text\" id=\"countPoints\" value=\"50\" /></p> */}\r\n        {/* <RangeValueAxisField nameAxis=\"X\" valMin={minX} valMax={maxX} idMin=\"minX\" idMax=\"maxX\"  />\r\n        <RangeValueAxisField nameAxis=\"Y\" valMin={minY} valMax={maxY} idMin=\"minY\" idMax=\"maxY\"  /> */}\r\n        {/* <p>Диапазон значений по оси X: от <input type=\"text\" id=\"minX\" value=\"0\" /> до <input type=\"text\" id=\"maxX\" value=\"100\" /> </p> */}\r\n        {/* <p>Диапазон значений по оси Y: от <input type=\"text\" id=\"minY\" value=\"0\" /> до <input type=\"text\" id=\"maxY\" value=\"100\" /> </p> */}\r\n        <p>\r\n          <CheckboxField label=\"Сетка\" \r\n                          idCbx=\"grid\" \r\n                          checked={checkedGrid} \r\n                          onChange={this.onGridChange} />\r\n          <CheckboxField label=\"Метки\" \r\n                          idCbx=\"tags\" \r\n                          checked={checkedLabelAxis} \r\n                          onChange={this.onLabelChange} />\r\n        </p>\r\n\r\n        {/* onChange={() => { this.props.updateGridAndLabel(this.state.checkedGrid, */}\r\n                          {/* //                                                 this.state.checkedGrid)}} /> */}\r\n\r\n        {/* <p>Сетка <input type=\"checkbox\" id=\"grid\" checked /> Метки <input type=\"checkbox\" id=\"tags\" checked /> </p> */}\r\n        {/* <p><input type=\"button\" value=\"Построить график\" onClick=\"updateChart()\" /></p> */}\r\n        {/* <p><input type=\"button\" value=\"Построить график\" onClick=\"drawChart()\" /></p> */}\r\n        <p><input type=\"button\" value=\"Перестроить график\" onClick={() => { \r\n          this.props.updateData(amountPoint, \r\n                                minX, \r\n                                maxX, \r\n                                minY, \r\n                                maxY, \r\n                                checkedGrid,\r\n                                checkedLabelAxis)}} />\r\n        </p>\r\n\r\n        {/* <p><input type=\"button\" value=\"Убрать сетку\" onClick=\"delGrid()\" />        <input type=\"button\" value=\"Убрать метки\" onclick=\"delLabel()\" /></p>\r\n        <p><input type=\"button\" value=\"Добавить сетку\" onClick=\"addGrid()\" />        <input type=\"button\" value=\"Добавить метки\" onclick=\"addLabel()\" /></p> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ParametrsForm;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass Chart extends React.Component {\r\n\r\n    componentDidMount() {\r\n      this.drawChart();\r\n    };\r\n\r\n    componentDidUpdate() {\r\n      if (this.props.reDraw) {\r\n        this.drawChart();\r\n      } \r\n\r\n      if (this.props.checkedGrid) {\r\n        d3.selectAll(\".grid .tick line\").attr(\"display\", \"block\");\r\n      } else {\r\n        d3.selectAll(\".grid .tick line\").attr(\"display\", \"none\");\r\n      }\r\n      if (this.props.checkedLabelAxis) {\r\n        d3.selectAll(\".axis text\").attr(\"display\", \"block\");\r\n      } else {\r\n        d3.selectAll(\".axis text\").attr(\"display\", \"none\");\r\n      }\r\n    };\r\n    \r\n    render() {\r\n      console.log(\"render()\", this.props.reDraw, this.props.checkedGrid, this.props.checkedLabelAxis);\r\n      return (\r\n              <svg className=\"svg\" \r\n                  id=\"svg\" \r\n                  // style={{border: \"1px solid black\"}}\r\n              >\r\n              </svg>\r\n      );\r\n    }\r\n\r\n\r\n    drawChart(){   \r\n      const { amountPoint, minX, maxX, minY, maxY, checkedGrid, checkedLabelAxis } = this.props;\r\n\r\n      d3.selectAll(\"svg > *\").remove();\r\n\r\n      function getRandomArbitrary(min, max) {\r\n        return parseInt(Math.random() * (max - min) + min);\r\n      }\r\n  \r\n      var x = []\r\n      var y = []  \r\n  \r\n      for(var i=0; i<amountPoint; i++){\r\n          x.push(getRandomArbitrary(minX,maxX))\r\n          y.push(getRandomArbitrary(minY,maxY))\r\n      }\r\n  \r\n      x.sort((a,b)=>{return a-b});\r\n    \r\n      var data = [ { label: \"График\", \r\n                  x: x,\r\n                  y: y\r\n                  } ] ;\r\n      var xy_chart = d3_xy_chart()\r\n          .width(960)\r\n          .height(500)\r\n          .xlabel(\"X Axis\")\r\n          .ylabel(\"Y Axis\");\r\n      var svg = d3.select(\"svg\")\r\n          .datum(data)\r\n          .call(xy_chart) ;\r\n  \r\n      function d3_xy_chart() {\r\n          var width = 640,  \r\n              height = 480, \r\n              xlabel = \"X Axis Label\",\r\n              ylabel = \"Y Axis Label\" ;\r\n          \r\n          function chart(selection) {\r\n              selection.each(function(datasets) {\r\n                  //\r\n                  // Create the plot. \r\n                  //\r\n                  var margin = {top: 20, right: 80, bottom: 30, left: 50}, \r\n                      innerwidth = width - margin.left - margin.right,\r\n                      innerheight = height - margin.top - margin.bottom ;\r\n                  \r\n                  var x_scale = d3.scale.linear()\r\n                      .range([0, innerwidth])\r\n                      .domain([ d3.min(datasets, function(d) { return minX; }), \r\n                      // .domain([ d3.min(datasets, function(d) { return d3.min(d.x); }), \r\n                      d3.max(datasets, function(d) { return maxX; }) ]) ;\r\n                              // d3.max(datasets, function(d) { return d3.max(d.x); }) ]) ;\r\n                  \r\n                  var y_scale = d3.scale.linear()\r\n                      .range([innerheight, 0])\r\n                      // .domain([ d3.min(datasets, function(d) { return d3.min(d.y); }),\r\n                      //         d3.max(datasets, function(d) { return d3.max(d.y); }) ]) ;\r\n                      .domain([ d3.min(datasets, function(d) { return minY; }),\r\n                              d3.max(datasets, function(d) { return maxY; }) ]) ;\r\n  \r\n                  var color_scale = d3.scale.category10()\r\n                      .domain(d3.range(datasets.length)) ;\r\n  \r\n                  var x_axis = d3.svg.axis()\r\n                      .scale(x_scale)\r\n                      .orient(\"bottom\") ;\r\n  \r\n                  var y_axis = d3.svg.axis()\r\n                      .scale(y_scale)\r\n                      .orient(\"left\") ;\r\n  \r\n                  var x_grid = d3.svg.axis()\r\n                      .scale(x_scale)\r\n                      .orient(\"bottom\")\r\n                      .tickSize(-innerheight)\r\n                      .tickFormat(\"\") ;\r\n  \r\n                  var y_grid = d3.svg.axis()\r\n                      .scale(y_scale)\r\n                      .orient(\"left\") \r\n                      .tickSize(-innerwidth)\r\n                      .tickFormat(\"\") ;\r\n  \r\n                  // Построение графика\r\n                  var draw_line = d3.svg.line()\r\n                      .interpolate(\"basis\")\r\n                      .x(function(d) { return x_scale(d[0]); })\r\n                      .y(function(d) { return y_scale(d[1]); }) ;\r\n  \r\n                  var svg = d3.select(this)\r\n                      .attr(\"width\", width)\r\n                      .attr(\"height\", height)\r\n                      .append(\"g\")\r\n                      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\") ;\r\n                  \r\n                  // Сетка и метки\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"x grid\")\r\n                        .attr(\"transform\", \"translate(0,\" + innerheight + \")\")\r\n                        .call(x_grid) ;\r\n    \r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"y grid\")\r\n                        .call(y_grid) ;\r\n\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"x axis\")\r\n                        .attr(\"transform\", \"translate(0,\" + innerheight + \")\") \r\n                        .call(x_axis)\r\n                        .append(\"text\")\r\n                        .attr(\"dy\", \"-.71em\")\r\n                        .attr(\"x\", innerwidth)\r\n                        .style(\"text-anchor\", \"end\")\r\n                        .text(xlabel) ;\r\n                    \r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"y axis\")\r\n                        .call(y_axis)\r\n                        .append(\"text\")\r\n                        .attr(\"transform\", \"rotate(-90)\")\r\n                        .attr(\"y\", 6)\r\n                        .attr(\"dy\", \"0.71em\")\r\n                        .style(\"text-anchor\", \"end\")\r\n                        .text(ylabel) ;\r\n  \r\n                  var data_lines = svg.selectAll(\".d3_xy_chart_line\")\r\n                      .data(datasets.map(function(d) {return d3.zip(d.x, d.y);}))\r\n                      .enter().append(\"g\")\r\n                      .attr(\"class\", \"d3_xy_chart_line\") ;\r\n                  \r\n                  data_lines.append(\"path\")\r\n                      .attr(\"class\", \"line\")\r\n                      .attr(\"d\", function(d) {return draw_line(d); })\r\n                      .attr(\"stroke\", function(_, i) {return color_scale(i);}) ;\r\n                  \r\n                  data_lines.append(\"text\")\r\n                      .datum(function(d, i) { return {name: datasets[i].label, final: d[d.length-1]}; }) \r\n                      .attr(\"transform\", function(d) { \r\n                          return ( \"translate(\" + x_scale(d.final[0]) + \",\" + \r\n                                  y_scale(d.final[1]) + \")\" ) ; })\r\n                      .attr(\"x\", 3)\r\n                      .attr(\"dy\", \".35em\")\r\n                      .attr(\"fill\", function(_, i) { return color_scale(i); })\r\n                      .text(function(d) { return d.name; }) ;\r\n  \r\n              }) ;\r\n          }\r\n  \r\n          chart.width = function(value) {\r\n              if (!arguments.length) return width;\r\n              width = value;\r\n              return chart;\r\n          };\r\n  \r\n          chart.height = function(value) {\r\n              if (!arguments.length) return height;\r\n              height = value;\r\n              return chart;\r\n          };\r\n  \r\n          chart.xlabel = function(value) {\r\n              if(!arguments.length) return xlabel ;\r\n              xlabel = value ;\r\n              return chart ;\r\n          } ;\r\n  \r\n          chart.ylabel = function(value) {\r\n              if(!arguments.length) return ylabel ;\r\n              ylabel = value ;\r\n              return chart ;\r\n          } ;\r\n  \r\n          return chart;\r\n      }         \r\n    }\r\n  }\r\n\r\n\r\n \r\n  \r\n\r\nexport default Chart;","import React from \"react\";\r\nimport ParametrsForm from \"./ParametrsForm\"\r\nimport Chart from \"./Chart\"\r\n\r\n  class App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n// state = {\r\n        amountPoint: 50,\r\n        minX: 0,\r\n        maxX: 100,\r\n        minY: 0,\r\n        maxY: 100,\r\n        checkedGrid: true,\r\n        checkedLabelAxis: true,\r\n        reDraw: false\r\n      };\r\n\r\n// handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n\r\n      // this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    }\r\n\r\n  handleFilterTextChange(amountPoint) {\r\n    var aaa = amountPoint;\r\n    // this.setState({\r\n    //   amountPoint: amountPoint\r\n    // });\r\n  }\r\n\r\n  \r\n\r\n  updateData = (amount, valMinX, valMaxX, valMinY, valMaxY, chkGrid, chkLabel) => {\r\n    this.setState({ \r\n      amountPoint: amount,\r\n      minX: valMinX,\r\n      maxX: valMaxX,\r\n      minY: valMinY,\r\n      maxY: valMaxY,\r\n      reDraw: true\r\n      // checkedGrid: chkGrid,\r\n      // checkedLabelAxis: chkLabel\r\n    })\r\n };\r\n\r\n  updateGridAndLabel = (chkGrid, chkLabel) => {\r\n    this.setState({ \r\n      checkedGrid: chkGrid,\r\n      checkedLabelAxis: chkLabel,\r\n      reDraw: false\r\n    })\r\n\r\n// this.setState(() => {   \r\n//     return {\r\n//       reDraw: false, \r\n//       checkedGrid: chkGrid,\r\n//       checkedLabelAxis: chkLabel,\r\n//     }\r\n//   });\r\n\r\n  // console.log(\"App:\", this.state.checkedGrid, \" (\", chkGrid, \") \", this.state.checkedLabelAxis, \" (\", chkLabel, \") \");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <h1>Визуализация линейной диаграммы на рандомно сгенерированных данных</h1>\r\n      <ParametrsForm updateData={this.updateData} \r\n                    updateGridAndLabel={this.updateGridAndLabel}\r\n                    // onAAmountPointChange={this.handleFilterTextChange}\r\n                    amountPoint={this.state.amountPoint}\r\n                    minX={this.state.minX} \r\n                    maxX={this.state.maxX} \r\n                    minY={this.state.minY} \r\n                    maxY={this.state.maxY}\r\n                    checkedGrid={this.state.checkedGrid}\r\n                    checkedLabelAxis={this.state.checkedLabelAxis}\r\n      />\r\n      <Chart amountPoint={this.state.amountPoint}\r\n            minX={this.state.minX} \r\n            maxX={this.state.maxX} \r\n            minY={this.state.minY} \r\n            maxY={this.state.maxY}\r\n            checkedGrid={this.state.checkedGrid}\r\n            checkedLabelAxis={this.state.checkedLabelAxis}\r\n            reDraw={this.state.reDraw}\r\n       />\r\n    </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from \"./components/App\"\n\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}